pipeline {
  agent any
  parameters { 
      string(name: 'PARAM', defaultValue: 'test', description: 'The parameter from Groovy') 
      string(name: 'TST', defaultValue: 'test', description: 'The parameter from Groovy') 
  }
    
   stages {
      stage('Clean Workspace') {
            steps {
                cleanWs() // Requires the Workspace Cleanup Plugin
            }
      }
      stage('Clone Sources') {
        steps {
          checkout scm
        } 
      }
      stage('Clone another repo') {
        steps {
          sh '''
                git clone https://github.com/Levintovich/GitCourse.git
            '''
        } 
      }
      stage('Build') {
         steps {
            echo 'Build process..'            
            sh '''
                cd "${WORKSPACE}/scripts/"
                chmod 755 *.sh
            '''
         }
      }      
        stage("Env Variables") {
            steps {
                sh "printenv"
            }
        }    
      stage('Test') {
         steps {
            echo 'Test process..'
            sh '''
              echo "Testing input string $PARAM" 
              cd "${WORKSPACE}/scripts"
              ./reverse.sh $PARAM
              ./reverse.sh $PARAM > results
            '''
         }
      }
      stage('Deployment') {
         steps {
            echo 'Deployment process..'
            sh '''
              echo "Testing input string $PARAM" 
              cd "${WORKSPACE}/scripts"
              dos2unix checkUserName.py
              ./checkUserName.py $PARAM >> results
            '''
         }
      }
      stage('Saving Results') {
        steps {
            echo 'Starting Saving Results process...'
                sh '''
                  report_file="${HOME}/Documents/Deployment/report"
                  log_file="${HOME}/Documents/Deployment/log"
                  mkdir -p ${HOME}/Documents/Deployment/
                  
                  # Log function for better messages
                  log() {
                      local message="$1"
                      echo "$(date '+%Y-%m-%d %H:%M:%S') - $message" >> ${log_file}
                  }
			    
                  log "Checking if report file exists"
                  if [ -f "${report_file}" ]; then
                      log "File ${report_file} exists."
                  else
                      log "File ${report_file} does not exist. Creating it."
                      touch ${report_file}
                  fi
                  
                  # Adding timestamp and environment details
                  log "Appending data to report file."
                  date >> ${report_file}
                  echo "USER=$USER JOB_NAME=$JOB_NAME" >> ${report_file}
                  echo "Build Number $BUILD_NUMBER" >> ${report_file}
                  
                  log "Adding results from ${WORKSPACE}/scripts/results to report file."
                  if [ -f "${WORKSPACE}/scripts/results" ]; then
                      cat "${WORKSPACE}/scripts/results" >> ${report_file}
                  else
                      log "Warning: Results file does not exist in ${WORKSPACE}/scripts/results."
                      echo "Results file not found." >> ${report_file}
                  fi
                  
                  echo "#############################" >> ${report_file}
                  log "Saving Results process completed successfully."
                '''
            }
      }
   }
post {
        always {
            emailext(
                to: 'levintovich@yahoo.com',
                subject: "Build ${currentBuild.currentResult}: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "Build ${env.BUILD_NUMBER} of job ${env.JOB_NAME} finished with status: ${currentBuild.currentResult}\n\n" +
                      "Check the build logs for more details: ${env.BUILD_URL}"
            )
        }
        success {
            emailext(
                to: 'levintovich@yahoo.com',
                subject: "Build Success: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "Build ${env.BUILD_NUMBER} of job ${env.JOB_NAME} succeeded!\n\n" +
                      "For more information, visit: ${env.BUILD_URL}"
            )
        }
        failure {
            emailext(
                to: 'levintovich@yahoo.com',
                subject: "Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "Build ${env.BUILD_NUMBER} of job ${env.JOB_NAME} failed. Please check the build logs for errors.\n\n" +
                      "Build logs: ${env.BUILD_URL}"
            )
        }
    }
}
